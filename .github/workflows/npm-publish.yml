name: Publish to npm

on:
  push:
    branches:
      - main

jobs:
  publish:
    runs-on: ubuntu-latest
    permissions:
      contents: write  # Permite escribir tags y commits
      packages: write  # Permite publicar paquetes
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Necesario para detectar cambios
      
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          registry-url: 'https://registry.npmjs.org'
      
      - name: Install dependencies
        run: npm install
      
      - name: Run tests
        run: npm test
      
      - name: Build
        run: npm run build
      
      - name: Check if version changed
        id: version
        run: |
          # Get current version from package.json
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "current=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          
          # Check if this version is already published
          if npm view ai-spine-sdk@$CURRENT_VERSION version 2>/dev/null; then
            echo "Version $CURRENT_VERSION already published"
            echo "changed=false" >> $GITHUB_OUTPUT
          else
            echo "New version $CURRENT_VERSION detected"
            echo "changed=true" >> $GITHUB_OUTPUT
          fi
      
      - name: Publish to npm
        if: steps.version.outputs.changed == 'true'
        run: |
          npm publish
          echo "âœ… Published version ${{ steps.version.outputs.current }} to npm"
        env:
          NODE_AUTH_TOKEN: ${{secrets.NPM_TOKEN}}
      
      - name: Create Git tag
        if: steps.version.outputs.changed == 'true'
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git tag -a v${{ steps.version.outputs.current }} -m "Release v${{ steps.version.outputs.current }}"
          git push origin v${{ steps.version.outputs.current }}
      
      - name: Extract changelog for version
        if: steps.version.outputs.changed == 'true'
        id: changelog
        run: |
          VERSION=${{ steps.version.outputs.current }}
          # Extraer la secciÃ³n del CHANGELOG para esta versiÃ³n
          CHANGELOG_CONTENT=$(sed -n "/## \[$VERSION\]/,/## \[/p" CHANGELOG.md | sed '$d' | tail -n +2)
          
          # Si no encuentra contenido, usar un mensaje genÃ©rico
          if [ -z "$CHANGELOG_CONTENT" ]; then
            CHANGELOG_CONTENT="- New version released
          - Check CHANGELOG.md for details"
          fi
          
          # Guardar en variable de GitHub
          echo "content<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG_CONTENT" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      
      - name: Create GitHub Release
        if: steps.version.outputs.changed == 'true'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Create release body
          cat << EOF > release-notes.md
          ## ðŸš€ Version ${{ steps.version.outputs.current }}
          
          ${{ steps.changelog.outputs.content }}
          
          ---
          
          ### ðŸ“¦ Installation
          \`\`\`bash
          npm install ai-spine-sdk@${{ steps.version.outputs.current }}
          \`\`\`
          
          ### ðŸ“š Links
          - [View on npm](https://www.npmjs.com/package/ai-spine-sdk/v/${{ steps.version.outputs.current }})
          - [Full Changelog](https://github.com/Dataframe-Consulting/ai-spine-sdk-js/blob/main/CHANGELOG.md)
          EOF
          
          # Create release using GitHub CLI (pre-installed on runners)
          gh release create v${{ steps.version.outputs.current }} \
            --title "v${{ steps.version.outputs.current }}" \
            --notes-file release-notes.md \
            --latest